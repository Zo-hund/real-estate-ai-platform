generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  searches      Search[]
  favorites     Property[]
  apiKeys       ApiKey[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  bedrooms    Int
  bathrooms   Int
  sqft        Float
  address     String
  city        String
  state       String
  zipCode     String
  type        String
  images      String[]
  features    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  favoredBy   User[]
  source      String?  // Data source provider
  externalId  String?  // ID from external provider
  lastSync    DateTime? // Last synchronization timestamp
}

model Search {
  id        String   @id @default(cuid())
  query     String
  filters   Json
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// API-related models
model Integration {
  id          String   @id @default(cuid())
  name        String
  provider    String
  apiKey      String?
  apiSecret   String?
  webhookUrl  String?
  status      String   @default("inactive")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastSync    DateTime?
  config      Json?
}

model ApiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  lastUsed    DateTime?
  permissions String[]
}

model ApiRequest {
  id        String   @id @default(cuid())
  path      String
  method    String
  status    Int
  latency   Int
  apiKeyId  String?
  createdAt DateTime @default(now())
  ip        String?
  userAgent String?
}

model ApiError {
  id        String   @id @default(cuid())
  type      String
  message   String
  stack     String?
  apiKeyId  String?
  createdAt DateTime @default(now())
}

model WebhookEvent {
  id          String   @id @default(cuid())
  provider    String
  type        String
  payload     Json
  processedAt DateTime
  createdAt   DateTime @default(now())
  status      String   @default("processed")
  error       String?
}

model MarketData {
  id            String   @id @default(cuid())
  region        String
  medianPrice   Float
  inventory     Int
  daysOnMarket  Float
  pricePerSqft  Float
  marketTrend   String
  source        String
  lastUpdate    DateTime
  createdAt     DateTime @default(now())

  @@unique([region, source])
}